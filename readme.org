planks: persistent lisp, mumble mumble mumble mumble

* Features
  
  - 99.9% portable common lisp
  - functional, append-only index
  - persistent CLOS object store
  - couchdb-style persistent functional views
  - persistent heap
  - persistent fulltext index
  - thread safe, multi-value concurrency control
  - versatile and lightweight  
  - easy to install and to use

* Download and Install

** Release tarballs
  
  http://common-lisp.net/project/planks/planks-release.tar.gz
  
** Version Control
   
 -  planks is hosted on github project page: [[http://github.com/drewc/planks]]
 -  planks is available via public git repository: [[https://github.com/drewc/planks.git]]

* the planks primer
  
** the planks.btree
   
*** traditional btree concept
    
   -  design features which distinguish btree vs other common trees  
   -  the root node
   -  leaf nodes, uniform length of search path
   -  search/lookup log n
   -  rebalancing
   -  locking, mutation, ...
    
*** appending-only architecture

  -  trade-offs of and differences of functional btree
  -  basic mechanics / btree-update / appending new root node
  -  clojure
     
*** advantage vs. stateful design

  -  lock free multi-threadded parallism
  -  multi-version concurrency and object reference permanence 
  -  uncorruptable, uncrashable, write-once file storage safety    
  -  efficiency & distributing computational load / multi-core
     
*** the planks.btree implementation
    
  - the original rucksack p-btree
  - in-memory b+tree core implementation

** btree data files

*** species of btree
    
   file vs single-file vs multi vs nested vs object-storage vs heap

*** btree forestry management

    filesystem / best practices?
    nested btree ?
    moving toward single all-accomodating shared file format??
    
** persistent data

*** key/value coding
    
*** shallow copy serialization 

   - rucksack serializer
      - utf8 encoded octet vector
      - well-defined extensible serialization format compatible across all lisps and platforms   
      - caveats: circular-structure, clos class/schema,  
    
** persistent objects

*** persistent-standard-class

** persistent storage

*** heap-btree
    
** persistent views

*** function-btree

** persistent index

*** string-hash

*** text-index
    
** additional examples

*** simple key/value store

    
